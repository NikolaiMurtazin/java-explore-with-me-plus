{
	"info": {
		"_postman_id": "49b3495c-37d3-448d-91d1-209144533433",
		"name": "Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32999577"
	},
	"item": [
		{
			"name": "Проставление лайка",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        // Создание пользователя",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.environment.set(\"userId\", user.id);",
							"        ",
							"        // Создание категории",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        pm.environment.set(\"categoryId\", category.id);",
							"        ",
							"        // Создание события",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.environment.set(\"eventId\", event.id);",
							"        ",
							"        // Проставляем лайк",
							"        await api.likeEvent(user.id, event.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Лайк успешно проставлен\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"like"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление лайка",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        // Создание пользователя",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.environment.set(\"userId\", user.id);",
							"        ",
							"        // Создание категории",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        pm.environment.set(\"categoryId\", category.id);",
							"        ",
							"        // Создание события",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.environment.set(\"eventId\", event.id);",
							"        ",
							"        // Проставляем лайк",
							"        await api.likeEvent(user.id, event.id);",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Лайк успешно удалён\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"like"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Проставление дизлайка",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        // Создание пользователя",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.environment.set(\"userId\", user.id);",
							"        ",
							"        // Создание категории",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        pm.environment.set(\"categoryId\", category.id);",
							"        ",
							"        // Создание события",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.environment.set(\"eventId\", event.id);",
							"        ",
							"        // Проставляем дизлайк",
							"        await api.dislikeEvent(user.id, event.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Дизлайк успешно проставлен\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"dislike"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление дизлайка",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        // Создание пользователя",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.environment.set(\"userId\", user.id);",
							"        ",
							"        // Создание категории",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        pm.environment.set(\"categoryId\", category.id);",
							"        ",
							"        // Создание события",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.environment.set(\"eventId\", event.id);",
							"        ",
							"        // Проставляем дизлайк",
							"        await api.dislikeEvent(user.id, event.id);",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Дизлайк успешно удалён\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/dislike",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"dislike"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Проставление лайка",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        // Создание пользователя",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.environment.set(\"userId\", user.id);",
							"        ",
							"        // Создание категории",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        pm.environment.set(\"categoryId\", category.id);",
							"        ",
							"        // Создание события",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.environment.set(\"eventId\", event.id);",
							"        ",
							"        // Проставляем лайк",
							"        await api.likeEvent(user.id, event.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Лайк успешно проставлен\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/like",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"like"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						},
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение событий отсортированных по лайкам",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        // Создаём пользователя",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.environment.set(\"userId\", user.id);",
							"        ",
							"        // Создаём категорию",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        pm.environment.set(\"categoryId\", category.id);",
							"        ",
							"        // Создаём событие",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.environment.set(\"eventId\", event.id);",
							"        ",
							"        // Проставляем лайк и дизлайк",
							"        await api.likeEvent(user.id, event.id);",
							"        await api.dislikeEvent(user.id, event.id);",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"События успешно получены и отсортированы по лайкам\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.json;",
							"    var events = pm.response.json();",
							"    pm.expect(events).to.be.an('array');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events?sort=TOP_RATING",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "sort",
							"value": "TOP_RATING"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "uid",
			"value": "1"
		},
		{
			"key": "eid",
			"value": "1"
		}
	]
}