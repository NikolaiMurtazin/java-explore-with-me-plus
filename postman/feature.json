{
	"info": {
		"_postman_id": "7c361397-e17d-44e2-aae4-ae064259534f",
		"name": "Feature Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32999577"
	},
	"item": [
		{
			"name": "Редактирование статуса события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        let event2 = rnd.getEvent(category.id)\r",
							"        event2.stateAction = \"PUBLISH_EVENT\"\r",
							"        pm.collectionVariables.set('response', event2);\r",
							"        pm.collectionVariables.set(\"1\", event.id)\r",
							"        pm.request.body.update({\r",
							"            mode: 'raw',\r",
							"            raw: event2,\r",
							"            options: { raw: { language: 'json' } }\r",
							"        });\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"stateAction\": \"PUBLISH_EVENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "(Required) id события"
						}
					]
				},
				"description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
			},
			"response": []
		},
		{
			"name": "Проставление лайка",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        // Создание пользователя",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.environment.set(\"userId\", user.id);",
							"        ",
							"        // Создание категории",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        pm.environment.set(\"categoryId\", category.id);",
							"        ",
							"        // Создание события",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.environment.set(\"eventId\", event.id);",
							"        ",
							"        // Проставляем лайк",
							"        await api.likeEvent(user.id, event.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Лайк успешно проставлен\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/ratings/add?eventId=1&isLike=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"ratings",
						"add"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "isLike",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление лайка",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        // Создание пользователя",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.environment.set(\"userId\", user.id);",
							"        ",
							"        // Создание категории",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        pm.environment.set(\"categoryId\", category.id);",
							"        ",
							"        // Создание события",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.environment.set(\"eventId\", event.id);",
							"        ",
							"        // Проставляем лайк",
							"        await api.likeEvent(user.id, event.id);",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Лайк успешно удалён\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/ratings/remove?eventId=1&isLike=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"ratings",
						"remove"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "isLike",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Проставление дизлайка",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        // Создание пользователя",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.environment.set(\"userId\", user.id);",
							"        ",
							"        // Создание категории",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        pm.environment.set(\"categoryId\", category.id);",
							"        ",
							"        // Создание события",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.environment.set(\"eventId\", event.id);",
							"        ",
							"        // Проставляем дизлайк",
							"        await api.dislikeEvent(user.id, event.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Дизлайк успешно проставлен\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/ratings/add?eventId=1&isLike=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"ratings",
						"add"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "isLike",
							"value": "false"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление дизлайка",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        // Создание пользователя",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.environment.set(\"userId\", user.id);",
							"        ",
							"        // Создание категории",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        pm.environment.set(\"categoryId\", category.id);",
							"        ",
							"        // Создание события",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.environment.set(\"eventId\", event.id);",
							"        ",
							"        // Проставляем дизлайк",
							"        await api.dislikeEvent(user.id, event.id);",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Дизлайк успешно удалён\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/ratings/remove?eventId=1&isLike=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"ratings",
						"remove"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "isLike",
							"value": "false"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Проставление лайка",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        // Создание пользователя",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.environment.set(\"userId\", user.id);",
							"        ",
							"        // Создание категории",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        pm.environment.set(\"categoryId\", category.id);",
							"        ",
							"        // Создание события",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.environment.set(\"eventId\", event.id);",
							"        ",
							"        // Проставляем лайк",
							"        await api.likeEvent(user.id, event.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Лайк успешно проставлен\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/ratings/add?eventId=1&isLike=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"ratings",
						"add"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						},
						{
							"key": "isLike",
							"value": "true"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение лайков по id пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        // Создаём пользователя",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.environment.set(\"userId\", user.id);",
							"        ",
							"        // Создаём категорию",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        pm.environment.set(\"categoryId\", category.id);",
							"        ",
							"        // Создаём событие",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.environment.set(\"eventId\", event.id);",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Результат должен содержать массив\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/ratings",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"ratings"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение событий отсортированных по лайкам",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        // Создаём пользователя",
							"        const user = await api.addUser(rnd.getUser());",
							"        pm.environment.set(\"userId\", user.id);",
							"        ",
							"        // Создаём категорию",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        pm.environment.set(\"categoryId\", category.id);",
							"        ",
							"        // Создаём событие",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        pm.environment.set(\"eventId\", event.id);",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"События успешно получены и отсортированы по лайкам\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.json;",
							"    var events = pm.response.json();",
							"    pm.expect(events).to.be.an('array');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events?sort=TOP_RATING",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "sort",
							"value": "TOP_RATING"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "uid",
			"value": "1"
		},
		{
			"key": "eid",
			"value": "1"
		}
	]
}